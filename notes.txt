- The two critical pillars of DevOps are Continuous Integration (CI) and Continuous Delivery (CD)
    - CI involves merging code into a source control repository that automatically check the code's quality through testing
    - CD is when code changes are automatically tested and deployed, either to a staging or production environment.

- MLOps: The Process of automating ML using Devops methodologies is Devops

    - 25% Devops
    - 25% Data (ETL, ELT, Processing, Pipelines, EDA, Versioning, Drift)
    - 25% Model (Creation, Validation, Deployment, Monitoring, Continuous Training)
    - 25% Business

- Additional Notes:
    - The reason Data Lake is helpful to build automation around including Machine Learning is the "near infinite" scale it 
        provides in terns of I/O coupled with its high durability and avaibility. Example: AWS S3


- The Feedback loop of MLOps includes the following:
    - Train and Retrain Model (1)
    - Deploy + Version
    - Audit Trail and Artifacts
    - Monitor
    - Repeat to (1)

- Additional Notes:
    - Machine Learning is the ability of computers to perform tasks without explicit programming. They do this by "learning" from data.
    - Using AWS Cloud9 environment is a more comprehensive way to develop ML solutions. 
    - Allows to make web requests from console to deployed services and has deep integration with AWS Lambda. 
    - Cloud computing harnesses near-infinite compute and data
    - A developer will run testing and linting locally to assist with keeping software quality high; 
    - A CI/CD pipeline runs these quality-control checks in an external environment to ensure the application is working before its release into another production.
    - Python has limitations inherent to the language, including lack of true threads, lack of a JIT (Just in Time) compiler and lack of inference found in C#; 
    - With Cloud computing, these limitations does not bind to many probelms;
    - Hence Python got lucky because of Cloud computing and Containers :p :D
    - Containerized technology like Kubernetes does the heavy lifting of building distributed systems, so python threads become irrelevant
    - Supervised learning: when "labels" are known and the model learns from historical data
    - Unsupervised learning works to discover "labels"
    - Reinforcement learning, an agent explores an environment to learn how to perform tasks. 

- Containers vs VMs
    - Containers are typically mesaured by MBs. They don't package anything bigger than an app and all the files necessary to run, and are often 
        used to package single functions that perform specific tasks (known as microservice). The lightweight of containers and their shared OS - makes them very easy to move
        across multiple environments.
    - VMS are typically measured by GBs. They usually contain their own OS
    - Containers consist of multiple layers, and these layers can be used or reused in other containers. These prevents a base layer of 10MB getting downloaded every time 
        for each container that uses it. In practice, you will download 10 MB layer once and reuse it many times. 
    - In VMs, doesn't matter if they all have the same fies, you are required to download them as a whole. 
    - Docker brought easy collaboration and sharing through a Registry.
    - Registeries allow developers to push their changes to a central location where other can then pull these changes and run them locally. 
    - *Microservice* is an application that is fully decoupled from system requirements like databases and can be run independently.

